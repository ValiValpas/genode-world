build "core init test/z3 drivers/timer drivers/rtc"

create_boot_directory

install_config {
<config verbose="no">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>
	<start name="test-z3-c++">
		<exit propagate="yes"/>
		<resource name="RAM" quantum="2M"/>
		<config>
			<libc stdin="/dev/null" stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc">
				<vfs>
					<dir name="dev"> <log/> <null/> <rtc/> </dir>
				</vfs>
			</libc>
		</config>
	</start>
</config>
}

build_boot_image {
	core init test-z3-c++ timer rtc_drv
	ld.lib.so libc.lib.so libm.lib.so
	stdcxx.lib.so z3.lib.so
}

append qemu_args " -nographic -m 512 "

run_genode_until {.*child "init" exited with exit value 0.*} 300

grep_output {^\[init \-\> test\-z3\-c\+\+\] }

# remove resource requests
unify_output {\[init -> test-z3-c\+\+\] resource_request: ram_quota=[0-9]+\n} ""
unify_output {\[init -> test-z3-c\+\+\] Cannot register exit handler - ATEXIT_SIZE reached\n} ""
unify_output {\[init -> test-z3-c\+\+\] int setrlimit\(int, const rlimit\*\)\: setrlimit not implemented\n} ""
unify_output {\[init -> test-z3-c\+\+\] virtual void Genode\:\:Platform_env\:\:release\(\)\: used after freeing emergency=[0-9]+\n} ""
unify_output {\[init -> test-z3-c\+\+\] virtual void Genode\:\:Platform_env\:\:release\(\)\: used before freeing emergency=[0-9]+\n} ""
unify_output {\[init -> test-z3-c\+\+\] int _sigprocmask\(int, const sigset_t\*, sigset_t\*\)\: _sigprocmask not implemented\n} ""
unify_output {\[init -> test-z3-c\+\+\] \(error "line [0-9]+ column [0-9]+\: unexpected character"\)\n} ""
unify_output {\[init -> test-z3-c\+\+\] \(error "line [0-9]+ column [0-9]+\: invalid command, symbol expected"\)\n} ""
unify_output {\[init -> test-z3-c\+\+\] } ""

compare_output_to {
de-Morgan example
(declare-fun y () Bool)
(declare-fun x () Bool)
(assert (not (= (not (and x y)) (or (not x) (not y)))))

; 
(set-info :status unknown)
(declare-fun y () Bool)
(declare-fun x () Bool)
(assert
 (not (= (not (and x y)) (or (not x) (not y)))))
(check-sat)

de-Morgan is valid

find_model_example1
sat
(define-fun x () Int
  1)
(define-fun y () Int
  3)
x = 1
y = 3
x + y + 1 = 5

prove_example1
conjecture 1
(=> (= x y) (= (g x) (g y)))
proved
conjecture 2
(=> (= x y) (= (g (g x)) (g y)))
failed to prove
counterexample:
(define-fun y () Int
  0)
(define-fun x () Int
  0)
(define-fun g ((x!1 Int)) Int
  (ite (= x!1 0) 1
  (ite (= x!1 1) 2
    1)))
g(g(x)) = 2
g(y)    = 1

prove_example1
conjecture 1:
(let ((a!1 (distinct (g (- (g x) (g y))) (g z))))
  (=> (and a!1 (<= (+ x z) y) (<= y x)) (< z 0)))
proved
conjecture 2:
(let ((a!1 (distinct (g (- (g x) (g y))) (g z))))
  (=> (and a!1 (<= (+ x z) y) (<= y x)) (< z (- 1))))
failed to prove
counterexample:
(define-fun z () Int
  (- 1))
(define-fun y () Int
  0)
(define-fun x () Int
  0)
(define-fun g ((x!1 Int)) Int
  (ite (= x!1 0) 0
  (ite (= x!1 (- 1)) 1
    0)))

nonlinear example 1
sat
(define-fun x () Real
  (/ 1.0 8.0))
(define-fun y () Real
  (root-obj (+ (* 64 (^ x 2)) (- 63)) 1))
(define-fun z () Real
  (/ 1.0 2.0))
model in decimal notation
(define-fun x () Real
  0.125)
(define-fun y () Real
  (- 0.9921567416?))
(define-fun z () Real
  0.5)
model using 50 decimal places
(define-fun x () Real
  0.125)
(define-fun y () Real
  (- 0.99215674164922147143810590761472265964134719365591?))
(define-fun z () Real
  0.5)

bitvector example 1
conjecture:
(= (bvsle (bvsub x #x0000000a) #x00000000) (bvsle x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec 32)
  #x80000000)
conjecture:
(= (bvule (bvsub x #x0000000a) #x00000000) (bvule x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec 32)
  #x00000000)
conjecture:
(=> (= (concat x y) (concat y x)) (= x y))
proved

bitvector example 2
(declare-fun y () (_ BitVec 32))
(declare-fun x () (_ BitVec 32))
(assert (= (bvsub (bvxor x y) #x00000067) (bvmul x y)))

sat
(define-fun y () (_ BitVec 32)
  #x2c330437)
(define-fun x () (_ BitVec 32)
  #x656fe436)

capi example
r: (bvsrem x y)

eval example 1
sat
Model:
(define-fun x () Int
  3)
(define-fun y () Int
  4)
x+y = 7

two contexts example 1
(+ x 1)

error example
failed: invalid argument
failed: index out of bounds

numeral example
(/ 1.0 2.0) (/ 1.0 2.0) (/ 1.0 2.0)
conjecture:
(and (= (/ 1.0 2.0) (/ 1.0 2.0)) (= (/ 1.0 2.0) (/ 1.0 2.0)))
proved
(- (/ 1.0 3.0)) (- (/ 3333333333333333333333333333333333.0
      10000000000000000000000000000000000.0))
conjecture:
(distinct (- (/ 1.0 3.0))
          (- (/ 3333333333333333333333333333333333.0
                10000000000000000000000000000000000.0)))
proved

if-then-else example
term: (ite false 1 0)

if-then-else example2
(> (ite b x y) 0)

quantifier example
(declare-fun f (Int Int) Int)
(declare-fun a () Int)
(assert (forall ((x Int) (y Int)) (>= (f x y) 0)))
(assert (< (f a a) a))

sat
(define-fun a () Int
  1)
(define-fun f ((x!1 Int) (x!2 Int)) Int
  0)
unsat

unsat core example1
unsat
(ast-vector
  p1
  p2)
size: 2
p1
p2
sat

unsat core example 2
unsat
(ast-vector
  p1)
size: 1
p1
F num. args (before simplify): 2
F num. args (after simplify):  4
Creating answer literal q0 for (not (<= x 10))
Creating answer literal q1 for (not (<= y x))
Creating answer literal q2 for (not (<= 5 y))
Creating answer literal q3 for (not (<= y 0))
unsat
(ast-vector
  q0
  q1
  q2)
size: 3
q0
q1
q2

unsat core example 3
unsat
(ast-vector
  p1
  p3)

tactic example 1
(goal
  (> x 0.0)
  (> y 0.0)
  (= x (+ y 2.0)))
(goals
(goal
  (not (<= y (- 2.0)))
  (not (<= y 0.0)))
)

tactic example 2
subgoal 0
(goal
  (< x 0.0)
  (= x (+ y 1.0))
  (< y 0.0))
subgoal 1
(goal
  (> x 0.0)
  (= x (+ y 1.0))
  (< y 0.0))

tactic example 3
(goals
(goal
  (= x 0.0)
  (= y 0.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 0.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
)
(goals
(goal
  (= x 0.0)
  (= y 0.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
)
(goals
(goal)
)

tactic example 4
sat
(define-fun y () (_ BitVec 16)
  #x318d)
(define-fun x () (_ BitVec 16)
  #x0674)
x*32 + y = #x000d
x & y    = #x0004

tactic example 5
sat
(define-fun y () Int
  (- 2))
(define-fun x () Int
  0)

tactic example 6
sat
(define-fun z () Int
  5)
(define-fun y () Int
  1)
(define-fun x () Int
  1)
unknown

tactic example 7
(goals
(goal
  (not (<= k!0 (- 1)))
  (not (<= z (+ 14 k!0))))
)
sat
model for subgoal:
(define-fun k!0 () Int
  0)
(define-fun z () Int
  15)
model for original goal:
(define-fun z () Int
  15)
(define-fun y () Int
  14)
(define-fun x () Int
  11)

tactic example 8
num-consts: 3
tactic failed...
trying again...
(goals
(goal
  (> (+ x y) 0))
)

tactic example 9
(goals
(goal
  (<= (* (+ y (* (- 1) x)) (+ y x)) 0))
)
(goals
(goal
  (>= (+ (* 2 x) y z) 0)
  (>= (+ (* x x) (* (- 1) y y)) 0))
)

tactic example using quantifier elimination
(forall ((x Int)) (=> (<= x a) (< x b)))
sat
(define-fun b () Int
  1)
(define-fun a () Int
  0)

visit example
application of x: x
application of x: x
application of *: (* x x)
application of y: y
application of y: y
application of *: (* y y)
application of -: (- (* x x) (* y y))
application of Int: 0
application of >=: (>= (- (* x x) (* y y)) 0)

incremental example1
sat
unsat

incremental example2
sat
unsat
sat
(declare-fun x () Int)
(assert (> x 0))


incremental example3
sat
unsat
sat
sat

enumeration sort example
1: (and (= x a) (= x b))
2: false

expr_vector example
(declare-fun x_0 () Int)
(declare-fun x_1 () Int)
(declare-fun x_2 () Int)
(declare-fun x_3 () Int)
(declare-fun x_4 () Int)
(declare-fun x_5 () Int)
(declare-fun x_6 () Int)
(declare-fun x_7 () Int)
(declare-fun x_8 () Int)
(declare-fun x_9 () Int)
(assert (>= x_0 1))
(assert (>= x_1 1))
(assert (>= x_2 1))
(assert (>= x_3 1))
(assert (>= x_4 1))
(assert (>= x_5 1))
(assert (>= x_6 1))
(assert (>= x_7 1))
(assert (>= x_8 1))
(assert (>= x_9 1))

solving...
sat
solution
(define-fun x_9 () Int
  1)
(define-fun x_8 () Int
  1)
(define-fun x_7 () Int
  1)
(define-fun x_6 () Int
  1)
(define-fun x_5 () Int
  1)
(define-fun x_4 () Int
  1)
(define-fun x_3 () Int
  1)
(define-fun x_2 () Int
  1)
(define-fun x_1 () Int
  1)
(define-fun x_0 () Int
  1)
exists expr_vector example
(exists ((x_0 Int)
         (x_1 Int)
         (x_2 Int)
         (x_3 Int)
         (x_4 Int)
         (x_5 Int)
         (x_6 Int)
         (x_7 Int)
         (x_8 Int)
         (x_9 Int))
  (and true
       (>= x_0 0)
       (>= x_1 0)
       (>= x_2 0)
       (>= x_3 0)
       (>= x_4 0)
       (>= x_5 0)
       (>= x_6 0)
       (>= x_7 0)
       (>= x_8 0)
       (>= x_9 0)))

substitute example
(or (= x 2) (= x 1))
(or (= x 3) (= x 1))

x: 10 y: 1
x: 9 y: 2
x: 8 y: 3
x: 7 y: 4
x: 6 y: 5
x: 5 y: 6
x: 4 y: 7
x: 3 y: 8
x: 2 y: 9
x: 1 y: 10

extract example
((_ extract 21 10) x) 21 10

sudoku example
sat
(declare-fun x_0_0 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_0_3 () Int)
(declare-fun x_0_4 () Int)
(declare-fun x_0_5 () Int)
(declare-fun x_0_6 () Int)
(declare-fun x_0_7 () Int)
(declare-fun x_0_8 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_1_3 () Int)
(declare-fun x_1_4 () Int)
(declare-fun x_1_5 () Int)
(declare-fun x_1_6 () Int)
(declare-fun x_1_7 () Int)
(declare-fun x_1_8 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_2_3 () Int)
(declare-fun x_2_4 () Int)
(declare-fun x_2_5 () Int)
(declare-fun x_2_6 () Int)
(declare-fun x_2_7 () Int)
(declare-fun x_2_8 () Int)
(declare-fun x_3_0 () Int)
(declare-fun x_3_1 () Int)
(declare-fun x_3_2 () Int)
(declare-fun x_3_3 () Int)
(declare-fun x_3_4 () Int)
(declare-fun x_3_5 () Int)
(declare-fun x_3_6 () Int)
(declare-fun x_3_7 () Int)
(declare-fun x_3_8 () Int)
(declare-fun x_4_0 () Int)
(declare-fun x_4_1 () Int)
(declare-fun x_4_2 () Int)
(declare-fun x_4_3 () Int)
(declare-fun x_4_4 () Int)
(declare-fun x_4_5 () Int)
(declare-fun x_4_6 () Int)
(declare-fun x_4_7 () Int)
(declare-fun x_4_8 () Int)
(declare-fun x_5_0 () Int)
(declare-fun x_5_1 () Int)
(declare-fun x_5_2 () Int)
(declare-fun x_5_3 () Int)
(declare-fun x_5_4 () Int)
(declare-fun x_5_5 () Int)
(declare-fun x_5_6 () Int)
(declare-fun x_5_7 () Int)
(declare-fun x_5_8 () Int)
(declare-fun x_6_0 () Int)
(declare-fun x_6_1 () Int)
(declare-fun x_6_2 () Int)
(declare-fun x_6_3 () Int)
(declare-fun x_6_4 () Int)
(declare-fun x_6_5 () Int)
(declare-fun x_6_6 () Int)
(declare-fun x_6_7 () Int)
(declare-fun x_6_8 () Int)
(declare-fun x_7_0 () Int)
(declare-fun x_7_1 () Int)
(declare-fun x_7_2 () Int)
(declare-fun x_7_3 () Int)
(declare-fun x_7_4 () Int)
(declare-fun x_7_5 () Int)
(declare-fun x_7_6 () Int)
(declare-fun x_7_7 () Int)
(declare-fun x_7_8 () Int)
(declare-fun x_8_0 () Int)
(declare-fun x_8_1 () Int)
(declare-fun x_8_2 () Int)
(declare-fun x_8_3 () Int)
(declare-fun x_8_4 () Int)
(declare-fun x_8_5 () Int)
(declare-fun x_8_6 () Int)
(declare-fun x_8_7 () Int)
(declare-fun x_8_8 () Int)
(assert (and (>= x_0_0 1) (<= x_0_0 9)))
(assert (and (>= x_0_1 1) (<= x_0_1 9)))
(assert (and (>= x_0_2 1) (<= x_0_2 9)))
(assert (and (>= x_0_3 1) (<= x_0_3 9)))
(assert (and (>= x_0_4 1) (<= x_0_4 9)))
(assert (and (>= x_0_5 1) (<= x_0_5 9)))
(assert (and (>= x_0_6 1) (<= x_0_6 9)))
(assert (and (>= x_0_7 1) (<= x_0_7 9)))
(assert (and (>= x_0_8 1) (<= x_0_8 9)))
(assert (and (>= x_1_0 1) (<= x_1_0 9)))
(assert (and (>= x_1_1 1) (<= x_1_1 9)))
(assert (and (>= x_1_2 1) (<= x_1_2 9)))
(assert (and (>= x_1_3 1) (<= x_1_3 9)))
(assert (and (>= x_1_4 1) (<= x_1_4 9)))
(assert (and (>= x_1_5 1) (<= x_1_5 9)))
(assert (and (>= x_1_6 1) (<= x_1_6 9)))
(assert (and (>= x_1_7 1) (<= x_1_7 9)))
(assert (and (>= x_1_8 1) (<= x_1_8 9)))
(assert (and (>= x_2_0 1) (<= x_2_0 9)))
(assert (and (>= x_2_1 1) (<= x_2_1 9)))
(assert (and (>= x_2_2 1) (<= x_2_2 9)))
(assert (and (>= x_2_3 1) (<= x_2_3 9)))
(assert (and (>= x_2_4 1) (<= x_2_4 9)))
(assert (and (>= x_2_5 1) (<= x_2_5 9)))
(assert (and (>= x_2_6 1) (<= x_2_6 9)))
(assert (and (>= x_2_7 1) (<= x_2_7 9)))
(assert (and (>= x_2_8 1) (<= x_2_8 9)))
(assert (and (>= x_3_0 1) (<= x_3_0 9)))
(assert (and (>= x_3_1 1) (<= x_3_1 9)))
(assert (and (>= x_3_2 1) (<= x_3_2 9)))
(assert (and (>= x_3_3 1) (<= x_3_3 9)))
(assert (and (>= x_3_4 1) (<= x_3_4 9)))
(assert (and (>= x_3_5 1) (<= x_3_5 9)))
(assert (and (>= x_3_6 1) (<= x_3_6 9)))
(assert (and (>= x_3_7 1) (<= x_3_7 9)))
(assert (and (>= x_3_8 1) (<= x_3_8 9)))
(assert (and (>= x_4_0 1) (<= x_4_0 9)))
(assert (and (>= x_4_1 1) (<= x_4_1 9)))
(assert (and (>= x_4_2 1) (<= x_4_2 9)))
(assert (and (>= x_4_3 1) (<= x_4_3 9)))
(assert (and (>= x_4_4 1) (<= x_4_4 9)))
(assert (and (>= x_4_5 1) (<= x_4_5 9)))
(assert (and (>= x_4_6 1) (<= x_4_6 9)))
(assert (and (>= x_4_7 1) (<= x_4_7 9)))
(assert (and (>= x_4_8 1) (<= x_4_8 9)))
(assert (and (>= x_5_0 1) (<= x_5_0 9)))
(assert (and (>= x_5_1 1) (<= x_5_1 9)))
(assert (and (>= x_5_2 1) (<= x_5_2 9)))
(assert (and (>= x_5_3 1) (<= x_5_3 9)))
(assert (and (>= x_5_4 1) (<= x_5_4 9)))
(assert (and (>= x_5_5 1) (<= x_5_5 9)))
(assert (and (>= x_5_6 1) (<= x_5_6 9)))
(assert (and (>= x_5_7 1) (<= x_5_7 9)))
(assert (and (>= x_5_8 1) (<= x_5_8 9)))
(assert (and (>= x_6_0 1) (<= x_6_0 9)))
(assert (and (>= x_6_1 1) (<= x_6_1 9)))
(assert (and (>= x_6_2 1) (<= x_6_2 9)))
(assert (and (>= x_6_3 1) (<= x_6_3 9)))
(assert (and (>= x_6_4 1) (<= x_6_4 9)))
(assert (and (>= x_6_5 1) (<= x_6_5 9)))
(assert (and (>= x_6_6 1) (<= x_6_6 9)))
(assert (and (>= x_6_7 1) (<= x_6_7 9)))
(assert (and (>= x_6_8 1) (<= x_6_8 9)))
(assert (and (>= x_7_0 1) (<= x_7_0 9)))
(assert (and (>= x_7_1 1) (<= x_7_1 9)))
(assert (and (>= x_7_2 1) (<= x_7_2 9)))
(assert (and (>= x_7_3 1) (<= x_7_3 9)))
(assert (and (>= x_7_4 1) (<= x_7_4 9)))
(assert (and (>= x_7_5 1) (<= x_7_5 9)))
(assert (and (>= x_7_6 1) (<= x_7_6 9)))
(assert (and (>= x_7_7 1) (<= x_7_7 9)))
(assert (and (>= x_7_8 1) (<= x_7_8 9)))
(assert (and (>= x_8_0 1) (<= x_8_0 9)))
(assert (and (>= x_8_1 1) (<= x_8_1 9)))
(assert (and (>= x_8_2 1) (<= x_8_2 9)))
(assert (and (>= x_8_3 1) (<= x_8_3 9)))
(assert (and (>= x_8_4 1) (<= x_8_4 9)))
(assert (and (>= x_8_5 1) (<= x_8_5 9)))
(assert (and (>= x_8_6 1) (<= x_8_6 9)))
(assert (and (>= x_8_7 1) (<= x_8_7 9)))
(assert (and (>= x_8_8 1) (<= x_8_8 9)))
(assert (distinct x_0_0 x_0_1 x_0_2 x_0_3 x_0_4 x_0_5 x_0_6 x_0_7 x_0_8))
(assert (distinct x_1_0 x_1_1 x_1_2 x_1_3 x_1_4 x_1_5 x_1_6 x_1_7 x_1_8))
(assert (distinct x_2_0 x_2_1 x_2_2 x_2_3 x_2_4 x_2_5 x_2_6 x_2_7 x_2_8))
(assert (distinct x_3_0 x_3_1 x_3_2 x_3_3 x_3_4 x_3_5 x_3_6 x_3_7 x_3_8))
(assert (distinct x_4_0 x_4_1 x_4_2 x_4_3 x_4_4 x_4_5 x_4_6 x_4_7 x_4_8))
(assert (distinct x_5_0 x_5_1 x_5_2 x_5_3 x_5_4 x_5_5 x_5_6 x_5_7 x_5_8))
(assert (distinct x_6_0 x_6_1 x_6_2 x_6_3 x_6_4 x_6_5 x_6_6 x_6_7 x_6_8))
(assert (distinct x_7_0 x_7_1 x_7_2 x_7_3 x_7_4 x_7_5 x_7_6 x_7_7 x_7_8))
(assert (distinct x_8_0 x_8_1 x_8_2 x_8_3 x_8_4 x_8_5 x_8_6 x_8_7 x_8_8))
(assert (distinct x_0_0 x_1_0 x_2_0 x_3_0 x_4_0 x_5_0 x_6_0 x_7_0 x_8_0))
(assert (distinct x_0_1 x_1_1 x_2_1 x_3_1 x_4_1 x_5_1 x_6_1 x_7_1 x_8_1))
(assert (distinct x_0_2 x_1_2 x_2_2 x_3_2 x_4_2 x_5_2 x_6_2 x_7_2 x_8_2))
(assert (distinct x_0_3 x_1_3 x_2_3 x_3_3 x_4_3 x_5_3 x_6_3 x_7_3 x_8_3))
(assert (distinct x_0_4 x_1_4 x_2_4 x_3_4 x_4_4 x_5_4 x_6_4 x_7_4 x_8_4))
(assert (distinct x_0_5 x_1_5 x_2_5 x_3_5 x_4_5 x_5_5 x_6_5 x_7_5 x_8_5))
(assert (distinct x_0_6 x_1_6 x_2_6 x_3_6 x_4_6 x_5_6 x_6_6 x_7_6 x_8_6))
(assert (distinct x_0_7 x_1_7 x_2_7 x_3_7 x_4_7 x_5_7 x_6_7 x_7_7 x_8_7))
(assert (distinct x_0_8 x_1_8 x_2_8 x_3_8 x_4_8 x_5_8 x_6_8 x_7_8 x_8_8))
(assert (distinct x_0_0 x_0_1 x_0_2 x_1_0 x_1_1 x_1_2 x_2_0 x_2_1 x_2_2))
(assert (distinct x_0_3 x_0_4 x_0_5 x_1_3 x_1_4 x_1_5 x_2_3 x_2_4 x_2_5))
(assert (distinct x_0_6 x_0_7 x_0_8 x_1_6 x_1_7 x_1_8 x_2_6 x_2_7 x_2_8))
(assert (distinct x_3_0 x_3_1 x_3_2 x_4_0 x_4_1 x_4_2 x_5_0 x_5_1 x_5_2))
(assert (distinct x_3_3 x_3_4 x_3_5 x_4_3 x_4_4 x_4_5 x_5_3 x_5_4 x_5_5))
(assert (distinct x_3_6 x_3_7 x_3_8 x_4_6 x_4_7 x_4_8 x_5_6 x_5_7 x_5_8))
(assert (distinct x_6_0 x_6_1 x_6_2 x_7_0 x_7_1 x_7_2 x_8_0 x_8_1 x_8_2))
(assert (distinct x_6_3 x_6_4 x_6_5 x_7_3 x_7_4 x_7_5 x_8_3 x_8_4 x_8_5))
(assert (distinct x_6_6 x_6_7 x_6_8 x_7_6 x_7_7 x_7_8 x_8_6 x_8_7 x_8_8))
(assert (= x_0_4 9))
(assert (= x_0_5 4))
(assert (= x_0_7 3))
(assert (= x_1_3 5))
(assert (= x_1_4 1))
(assert (= x_1_8 7))
(assert (= x_2_1 8))
(assert (= x_2_2 9))
(assert (= x_2_7 4))
(assert (= x_3_6 2))
(assert (= x_3_8 8))
(assert (= x_4_1 6))
(assert (= x_4_3 2))
(assert (= x_4_5 1))
(assert (= x_4_7 5))
(assert (= x_5_0 1))
(assert (= x_5_2 2))
(assert (= x_6_1 7))
(assert (= x_6_6 5))
(assert (= x_6_7 2))
(assert (= x_7_0 9))
(assert (= x_7_4 6))
(assert (= x_7_5 5))
(assert (= x_8_1 4))
(assert (= x_8_3 9))
(assert (= x_8_4 7))

715894632
234516897
689723145
493657218
867231954
152489763
376148529
928365471
541972386

done
}
