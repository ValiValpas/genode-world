proc nic_drv_opt {} {
	if {[have_spec linux]} {
		return "ld=\"no\""
	}
	return ""
}

#
# Build
#

set build_components { core init drivers/timer
	app/rom_logger
	proxy/remote_rom/backend/nic_ip
	server/dynamic_rom
	drivers/nic
	server/nic_bridge
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

install_config {
<config>
	<parent-provides>
		<service name="CAP"/>
		<service name="LOG"/>
		<service name="RM"/>
		<service name="SIGNAL"/>
		<service name="ROM" />
		<service name="RAM" />
		<service name="CPU" />
		<service name="PD" />
		<service name="IO_MEM" />
		<service name="IRQ" />
	</parent-provides>
	<default-route>
		<service name="Nic"> <child name="nic_bridge"/></service>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100" />
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="rom_logger">
		<resource name="RAM" quantum="4M"/>
		<config rom="remote" format="hash" />
		<route>
			<service name="ROM" label_suffix="remote"> <child name="remote_rom_client"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>
	<start name="remote_rom_client">
		<resource name="RAM" quantum="16M"/>
		<provides><service name="ROM"/></provides>
		<config>
			<remote_rom name="remote" src="192.168.42.11" dst="192.168.42.10" />
		</config>
	</start>
	<start name="dynamic_rom">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="ROM"/></provides>
		<config>
			<rom name="foobar">
				<sleep milliseconds="5000" />
				<inline description="disable X-ray mode">
					<xray enabled="no"/>
				</inline>
				<sleep milliseconds="20000" />
			</rom>
		</config>
	</start>
	<start name="remote_rom_server">
		<resource name="RAM" quantum="8M"/>
		<route>
			<service name="ROM" label_suffix="foobar"> <child name="dynamic_rom"/> </service>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/></any-service>
		</route>
		<config chksum_offload="yes">
			<remote_rom name="foobar" src="192.168.42.20" dst="192.168.42.21" binary="true"/>
		</config>
	</start>
	<start name="nic_bridge">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
		<route>
			<service name="Nic"><child name="nic_drv"/></service>
			<any-service><parent /><any-child /></any-service>
		</route>
		<config verbose="no">
			<policy label_prefix="remote_rom_server" ip_addr="192.168.42.20" />
			<policy label_prefix="remote_rom_client" ip_addr="192.168.42.11" />
		</config>
	</start>
	<start name="nic_drv" } [nic_drv_opt] {>
		<binary name="} [nic_drv_binary] {" />
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
		<config>
			<nic tap="tap2" mac="02:00:00:00:00:11"/>
		</config>
	</start>
</config>}

#
# Boot image
#

append boot_modules { core ld.lib.so init timer
	remote_rom_client
	remote_rom_server
	rom_logger
	dynamic_rom
	nic_bridge
	} [nic_drv_binary] {
}

append_platform_drv_boot_modules
build_boot_image $boot_modules

append qemu_args " -nographic "
append qemu_args " -net tap,ifname=tap2 "

run_genode_until forever
