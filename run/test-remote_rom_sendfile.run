#
# Build
#

set build_components { core init drivers/timer
	app/rom_logger
	server/dynamic_rom
	proxy/remote_rom/backend/nic_ip/server
	drivers/nic
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

install_config {
<config>
	<parent-provides>
		<service name="CAP"/>
		<service name="LOG"/>
		<service name="RM"/>
		<service name="SIGNAL"/>
		<service name="ROM" />
		<service name="RAM" />
		<service name="CPU" />
		<service name="PD" />
		<service name="IO_MEM" />
		<service name="IRQ" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100" />
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="rom_logger">
		<resource name="RAM" quantum="4M"/>
		<config rom="test-file" format="hash" />
	</start>
	<start name="remote_rom_server">
		<resource name="RAM" quantum="8M"/>
		<route>
			<service name="ROM" label_suffix="remote"> <parent label="test-file"/> </service>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<any-service> <parent/> <any-child/></any-service>
		</route>
		<config chksum_offload="yes">
			<remote_rom name="remote" src="192.168.42.10" dst="192.168.42.11" binary="true"/>
		</config>
	</start>
	<start name="nic_drv">
		<binary name="} [nic_drv_binary] {" />
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
		<config>
			<nic tap="tap1" mac="02:00:00:00:00:10"/>
		</config>
	</start>
</config>}

#
# Boot image
#

append boot_modules { core ld.lib.so init timer
	remote_rom_server
	dynamic_rom
	rom_logger
	test-file
	} [nic_drv_binary] {
}

append_platform_drv_boot_modules
build_boot_image $boot_modules

append qemu_args " -nographic "
append qemu_args " -net tap,ifname=tap1 "

run_genode_until forever
